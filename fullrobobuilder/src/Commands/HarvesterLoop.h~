// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef HARVESTERLOOP_H
#define HARVESTERLOOP_H


#include "Commands/Subsystem.h"
#include "../Robot.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class HarvesterLoop: public Command {
public:
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	HarvesterLoop(int HarvesterState);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	bool quickReverse = 0;
	struct timeval tv;
	double ref_time = 0 ;
	double current_time = 5;
	virtual void Initialize();
	virtual void Execute(){
		SmartDashboard::PutNumber("Harvester State",Robot::harvester->HarvesterState);
		SmartDashboard::PutNumber("Angle sensor",Robot::harvester->ReturnPIDInput());
		SmartDashboard::PutNumber("move motor",Robot::oi->getxbox()->GetRawButton(8));
		SmartDashboard::PutNumber("ball input",Robot::harvester->ballSensor->Get());

		current_time = (double)((double)tv.tv_sec + ((double)tv.tv_usec)/1000000.0);

		//state machine
		if (Robot::harvester->HarvesterState == 0){

			Robot::harvester->SetSetpoint(.05);//down
			if (Robot::harvester->ballSensor->Get() == 1){
				Robot::harvester->setHarvestMotor(1);
				quickReverse = 0;
			}
			else {
				if (quickReverse == 0){
					gettimeofday(&tv, NULL);
					ref_time = (double)((double)tv.tv_sec + ((double)tv.tv_usec)/1000000.0);
					ref_time += 1; //seconds to reverse motor
				}
				quickReverse = 1;
				Robot::harvester->setHarvestMotor(0);
			}
			if (ref_time > current_time){
				Robot::harvester->setHarvestMotor(-.3);
			}
		}
		else if (Robot::harvester->HarvesterState == 1){

			Robot::harvester->SetSetpoint(.15);//10 degrees
			Robot::harvester->setHarvestMotor(0);
		}
		else if (Robot::harvester->HarvesterState == 2){

			Robot::harvester->SetSetpoint(1.25);//90 degrees
			if (Robot::oi->getxbox()->GetRawButton(8)== 1){
				Robot::harvester->setHarvestMotor(.5);
			}
			else {
				Robot::harvester->setHarvestMotor(0);
			}
		}
		else if (Robot::harvester->HarvesterState == 3){

			Robot::harvester->SetSetpoint(1.3);//110 degrees
			Robot::harvester->setHarvestMotor(0);
		}

	}
	virtual bool IsFinished();
	virtual void End();
	virtual void Interrupted();

private:
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLES

    int m_HarvesterState;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLES
};

#endif
