// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "TankDriveTrain.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/DriveLoop.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

TankDriveTrain::TankDriveTrain() : Subsystem("TankDriveTrain") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    leftMotor = RobotMap::tankDriveTrainLeftMotor;
    rightMotor = RobotMap::tankDriveTrainRightMotor;
    robotDrive = RobotMap::tankDriveTrainRobotDrive;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void TankDriveTrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new DriveLoop(0, 0));
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void TankDriveTrain::CameraPID(int pixels){
    INTEGRATED_GOAL_GAIN = Preferences::GetInstance()->GetDouble("Drive I",0.001); // per pixel
    PROPORTIONAL_TURN_GAIN = Preferences::GetInstance()->GetDouble("Drive P",0.05);// motor/pixels, TEC

    double cmd = pixels*PROPORTIONAL_TURN_GAIN;
	if(oldPixels == 0){
		integral_cmd = 0;
	}
	else if ((float)pixels/(float)oldPixels < 0){
		integral_cmd = 0;
	}
	oldPixels = pixels;

	if( abs(pixels) < INTEGRATED_TURN_THRESHOLD)
		integral_cmd += pixels*INTEGRATED_GOAL_GAIN;
	else
		integral_cmd = 0;

    robotDrive->ArcadeDrive(.1, cmd + integral_cmd,0 ); //drift forward while turning to reduce friction
    SmartDashboard::PutNumber("Camera Pid command", cmd);
    SmartDashboard::PutNumber("Camera integral gain", integral_cmd);
}
