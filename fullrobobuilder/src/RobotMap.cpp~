// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::tankDriveTrainLeftMotor;
std::shared_ptr<SpeedController> RobotMap::tankDriveTrainRightMotor;
std::shared_ptr<RobotDrive> RobotMap::tankDriveTrainRobotDrive;
std::shared_ptr<DigitalInput> RobotMap::catapultInLaunchPosition;
std::shared_ptr<DigitalInput> RobotMap::catapultBallInCatapult;
std::shared_ptr<PowerDistributionPanel> RobotMap::catapultCatapultMotorCurrent;
std::shared_ptr<SpeedController> RobotMap::catapultCatapultLeftMotor;
std::shared_ptr<SpeedController> RobotMap::catapultCatapultRightMotor;
std::shared_ptr<RobotDrive> RobotMap::catapultCatapultDrive;
std::shared_ptr<AnalogPotentiometer> RobotMap::harvesterHarvesterAngle;
std::shared_ptr<SpeedController> RobotMap::harvesterHarvesterPIDMotorOut;
std::shared_ptr<DigitalInput> RobotMap::harvesterBallSensor;
std::shared_ptr<SpeedController> RobotMap::harvesterFeedLeftMotor;
std::shared_ptr<SpeedController> RobotMap::harvesterFeedRightMotor;
std::shared_ptr<RobotDrive> RobotMap::harvesterFeedDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    tankDriveTrainLeftMotor.reset(new Talon(0));
    lw->AddActuator("TankDriveTrain", "LeftMotor", (Talon&) tankDriveTrainLeftMotor);
    
    tankDriveTrainRightMotor.reset(new Talon(1));
    lw->AddActuator("TankDriveTrain", "RightMotor", (Talon&) tankDriveTrainRightMotor);
    
    tankDriveTrainRobotDrive.reset(new RobotDrive(tankDriveTrainLeftMotor, tankDriveTrainRightMotor));
    
    tankDriveTrainRobotDrive->SetSafetyEnabled(true);
        tankDriveTrainRobotDrive->SetExpiration(0.1);
        tankDriveTrainRobotDrive->SetSensitivity(0.5);
        tankDriveTrainRobotDrive->SetMaxOutput(1.0);
        tankDriveTrainRobotDrive->SetInvertedMotor(RobotDrive::kRearLeftMotor, true);
        tankDriveTrainRobotDrive->SetInvertedMotor(RobotDrive::kRearRightMotor, true);
    catapultInLaunchPosition.reset(new DigitalInput(0));
    lw->AddSensor("Catapult", "InLaunchPosition", catapultInLaunchPosition);
    
    catapultBallInCatapult.reset(new DigitalInput(2));
    lw->AddSensor("Catapult", "BallInCatapult", catapultBallInCatapult);
    
    catapultCatapultMotorCurrent.reset(new PowerDistributionPanel(0));
    lw->AddSensor("Catapult", "CatapultMotorCurrent", catapultCatapultMotorCurrent);
    
    catapultCatapultLeftMotor.reset(new Talon(4));
    lw->AddActuator("Catapult", "CatapultLeftMotor", (Talon&) catapultCatapultLeftMotor);
    
    catapultCatapultRightMotor.reset(new Talon(5));
    lw->AddActuator("Catapult", "CatapultRightMotor", (Talon&) catapultCatapultRightMotor);
    
    catapultCatapultDrive.reset(new RobotDrive(catapultCatapultLeftMotor, catapultCatapultRightMotor));
    
    catapultCatapultDrive->SetSafetyEnabled(true);
        catapultCatapultDrive->SetExpiration(0.1);
        catapultCatapultDrive->SetSensitivity(0.5);
        catapultCatapultDrive->SetMaxOutput(1.0);

    harvesterHarvesterAngle.reset(new AnalogPotentiometer(1, 1.0, 0.0));
    lw->AddSensor("Harvester", "HarvesterAngle", harvesterHarvesterAngle);
    
    harvesterHarvesterPIDMotorOut.reset(new Talon(6));
    lw->AddActuator("Harvester", "HarvesterPIDMotorOut", (Talon&) harvesterHarvesterPIDMotorOut);
    
    harvesterBallSensor.reset(new DigitalInput(1));
    lw->AddSensor("Harvester", "BallSensor", harvesterBallSensor);
    
    harvesterFeedLeftMotor.reset(new Talon(2));
    lw->AddActuator("Harvester", "FeedLeftMotor", (Talon&) harvesterFeedLeftMotor);
    
    harvesterFeedRightMotor.reset(new Talon(3));
    lw->AddActuator("Harvester", "FeedRightMotor", (Talon&) harvesterFeedRightMotor);
    
    harvesterFeedDrive.reset(new RobotDrive(harvesterFeedLeftMotor, harvesterFeedRightMotor));
    
    harvesterFeedDrive->SetSafetyEnabled(true);
        harvesterFeedDrive->SetExpiration(0.1);
        harvesterFeedDrive->SetSensitivity(0.5);
        harvesterFeedDrive->SetMaxOutput(1.0);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
